# -*- coding: utf-8 -*-
"""tengkums

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DcQ5NhgzxOl_7KjpIZtE3IjztxlNXa3j
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import sklearn.metrics
import os
from pandas import Series, DataFrame
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.model_selection import GridSearchCV
# %matplotlib inline
import matplotlib.pylab as plt
from sklearn import datasets

dftrain = pd.read_csv('https://raw.githubusercontent.com/aprodhite1/traintest/main/Train.csv', sep=',')
dftrain

dftest=pd.read_csv('https://raw.githubusercontent.com/aprodhite1/traintest/a24b649fd726cdbfa61280fed87a179c54332be8/Test.csv', sep=',')

dftrain.drop('Y',inplace=True, axis=1)
dftrain

X =dftrain.iloc[:,0:13]
y =dftrain.iloc[:,8]
X_train,X_test,y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=0)

from sklearn.preprocessing import StandardScaler
feature_scaler = StandardScaler()
X_train = feature_scaler.fit_transform(X_train)
X_test = feature_scaler.transform(X_test)

X_train=pd.DataFrame(X_train)
X_train

X_train=X_train.replace((np.inf, -np.inf, np.nan), 0).reset_index(drop=True)

y_train = y_train.replace((np.inf, -np.inf, np.nan), 0).reset_index(drop=True)
y_train

param_grid={'n_neighbors': np.arange(1, 100)}
knn_clf=GridSearchCV(KNeighborsClassifier(), param_grid, cv=3,scoring='accuracy')
knn_clf.fit(X_train,y_train)
print(knn_clf.best_params_)

knn_clf=KNeighborsClassifier(n_neighbors=2)
knn_clf.fit(X_train,y_train)

dftest = dftest.replace((np.inf, -np.inf, np.nan), 0).reset_index(drop=True)

y_pred=knn_clf.predict(dftest)
y_pred

dftrain = dftrain.replace((np.inf, -np.inf, np.nan), 0).reset_index(drop=True)

id=dftest['ID']
id

y_pred

my_df = {'ID': id, 'Y': y_pred}
df = pd.DataFrame(my_df)
  
# displaying the DataFrame
print('DataFrame:\n', df)
   
# saving the DataFrame as a CSV file

gfg_csv_data = df.to_csv('Gf.csv', index = False)
print('\nCSV String:\n', gfg_csv_data)